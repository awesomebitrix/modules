<?php
/**
 * Created by PhpStorm.
 * User: dremin_s
 * Date: 26.07.2016
 * Time: 12:53
 */

namespace AB\Iblock;
use AB\Iblock\Exceptions\ArgumentException;
use Bitrix\Main\Entity;
use Bitrix\Main\Loader;

Loader::includeModule('iblock');

class Element extends Model\ElementTable
{
	/** @var  Manager */
	private static $manager;

	/** @var  Query */
	private static $propertyQuery;

	public static function getEntity($iblockId = null, $properties = [], $name = null)
	{
		$Manager = new Manager($iblockId);

		if(intval($iblockId) > 0 && count($properties) > 0){
			$entity = $Manager->compileEntity(null, $properties)->getElementEntity();
		} else {
			$entity = $Manager->createElementEntity()->getElementEntity();
		}

		self::$manager = $Manager;

		return $entity;
	}

	/**
	 * @method query
	 * @return Query
	 */
	public static function query()
	{
		$q = new Query(static::getEntity());
		$q->setManager(self::$manager);

		return $q;
	}

	/**
	 * @method getProperty
	 * @param $iblockId
	 * @param $elementId
	 * @param $code
	 *
	 * @return array|false
	 * @throws ArgumentException
	 */
	public static function getProperty($iblockId, $elementId, $code)
	{
		if(intval($iblockId) == 0)
			throw new ArgumentException('Iblock id is null', ['IBLOCK_ID' => intval($iblockId)]);

		if(intval($elementId) == 0)
			throw new ArgumentException('Element id is null', ['ELEMENT_ID' => intval($elementId)]);

		if(strlen($code) == 0)
			throw new ArgumentException('Property code is empty', ['CODE' => intval($code)]);

		$Manager = new Manager($iblockId);
		$propEntity = $Manager->createPropertyEntity([$code])->getPropertyEntity();

		$arCode = explode('.', $code);

		$propEntity->addField(new Entity\ReferenceField(
			'PROP',
			\Bitrix\Iblock\PropertyTable::getEntity(),
			['=ref.CODE'=>array('?s', $arCode[0])]
		));
		$q = new Entity\Query($propEntity);

		$q->setFilter(['IBLOCK_ELEMENT_ID' => $elementId])
			->setSelect([''=>'PROP', 'VALUE'=>$code,])
			->setLimit(1);

		$res = $q->exec();

		return $res->fetch();
	}

	/**
	 * @method getAllProperties - метод экспериментальный
	 * @param $iblockId
	 * @param $elementId
	 *
	 * @return array|false|null
	 * @throws ArgumentException
	 */
	private static function getAllProperties($iblockId, $elementId)
	{
		if(intval($iblockId) == 0)
			throw new ArgumentException('Iblock id is null', ['IBLOCK_ID' => intval($iblockId)]);

		if(intval($elementId) == 0)
			throw new ArgumentException('Element id is null', ['ELEMENT_ID' => intval($elementId)]);

		$Manager = new Manager($iblockId);
		$propEntity = $Manager->createPropertyEntity(['*'])->getPropertyEntity();

		$q = new Entity\Query($propEntity);
		$q->setSelect(['*'])
			->setFilter(['IBLOCK_ELEMENT_ID' => $elementId])
			->setLimit(null);

		$res = $q->exec();
		$result = null;
		while ($prop = $res->fetch()){
			$result = $prop;
		}

		return $result;
	}

	/**
	 * @method add
	 * @param array $data
	 *
	 * @return Entity\AddResult
	 */
	public static function add(array $data)
	{
		return parent::add($data); // TODO: Change the autogenerated stub
	}

	/**
	 * @method update
	 * @param mixed $primary
	 * @param array $data
	 *
	 * @return Entity\UpdateResult
	 */
	public static function update($primary, array $data)
	{
		return parent::update($primary, $data); // TODO: Change the autogenerated stub
	}

	/**
	 * @method delete
	 * @param mixed $primary
	 *
	 * @return Entity\DeleteResult
	 */
	public static function delete($primary)
	{
		return parent::delete($primary); // TODO: Change the autogenerated stub
	}

}